module SimplePDL2PetriNet;
create OUT: petrinet from  IN: simplepdl;

-- Obtenir le processus qui contient ce process element.
-- Remarque: Ce helper ne serait pas utile si une r�f�rence opposite
-- avait �t� plac�e entre Process et ProcessElement
helper context simplepdl!ProcessElement
def: getProcess(): simplepdl!Process =
	simplepdl!Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first();


-- Traduire un Process en un PetriNet de m�me nom
rule Process2PetriNet {
	from p: simplepdl!Process
	to pn: petrinet!PetriNet (name <- p.name)
	
	do { pn.PetriElement <- petrinet!Arc.allInstances()
		->union(petrinet!Place.allInstances())
		->union(petrinet!Transition.allInstances());
	}
}

-- Traduire une WorkDefinition en un motif sur le r�seau de Petri
rule WorkDefinition2PetriNet {
	from wd: simplepdl!WorkDefinition
	to
		-- PLACES d'une WorkDefinition
		p_ready: petrinet!Place(
				name <- wd.name + '_ready',
				jetons <- 1,
				petrinet <- wd.getProcess()),
				
						
		p_running: petrinet!Place(
				name <- wd.name + '_running',
				jetons <- 0,
				petrinet <- wd.getProcess()),
				
				
		p_finished: petrinet!Place(
				name <- wd.name + '_finished',
				jetons <- 0,
				petrinet <- wd.getProcess()),
				
		p_started: petrinet!Place(
				name <- wd.name + '_started',
				jetons <- 0,
				petrinet <- wd.getProcess()),
				
				
		-- TRANSITIONS d'une WorkDefinition
		t_start: petrinet!Transition(
				name <- wd.name + '_start',
				petrinet <- wd.getProcess()),
				
		t_finish: petrinet!Transition(
				name <- wd.name + '_finish',
				petrinet <- wd.getProcess()),
				
		-- ARCS d'une WorkDefinition
		a_ready_to_start: petrinet!Arc(
				jetons <- 1,
				source <- p_ready,
				destination <- t_start,
				type <- #normal,
				petrinet <- wd.getProcess()),
				
		a_start_to_started: petrinet!Arc(
				jetons <- 1,
				source <- t_start,
				destination <- p_started,
				type <- #normal,
				petrinet <- wd.getProcess()),
				
		a_start_to_running: petrinet!Arc(
				jetons <- 1,
				source <- t_start,
				destination <- p_running,
				type <- #normal,
				petrinet <- wd.getProcess()),
				
		a_running_to_finish: petrinet!Arc(
				jetons <- 1,
				source <- p_running,
				destination <- t_finish,
				type <- #normal,
				petrinet <- wd.getProcess()),
						
		a_finish_to_finished: petrinet!Arc(
				jetons <- 1,
				source <- t_finish,
				destination <- p_finished,
				type <- #normal,
				petrinet <- wd.getProcess())
																		
				
}

-- WorkSequence
rule WorkSequence2PetriNet {
	from ws: simplepdl!WorkSequence
	to
		a_worksequence: petrinet!Arc (
			
			source <- if (ws.linkType = #startToFinish or ws.linkType = #startToStart) then
			                 thisModule.resolveTemp(ws.predecessor, 'p_started')
				      else 
				      	     thisModule.resolveTemp(ws.predecessor, 'p_finished')
					  endif,
					  
			destination <- if (ws.linkType = #finishToStart or ws.linkType = #startToStart) then
			                  thisModule.resolveTemp(ws.successor, 't_start')
					    else
					    	  thisModule.resolveTemp(ws.successor, 't_finish')
					    endif,
						
			jetons <- 1,
			type <- #read_arc,
			petrinet <- ws.successor.getProcess())
					  
}


-- Ressource
rule Ressource2PetriNet {
	from rs: simplepdl!Ressource
	to
		p_ressource: petrinet!Place (
			name <- rs.name,
			jetons <- rs.quantity,
			petrinet <- rs.getProcess())
						  
}

--Demande
rule Demande2PetriNet {
	
	from demande: simplepdl!Demande
	to
	    a_take: petrinet!Arc(	    	
	    	source <- demande.ressource,
			destination <- thisModule.resolveTemp(demande.workdefinition, 't_start'),
			jetons <- demande.occurences,
			type <- #normal,
			petrinet <- demande.ressource.getProcess()),
		
	    a_return: petrinet!Arc(	    	
	    	source <- thisModule.resolveTemp(demande.workdefinition, 't_finish'),
			destination <- demande.ressource,
			jetons <- demande.occurences,
			type <- #normal,
			petrinet <- demande.ressource.getProcess()
	    )
}

