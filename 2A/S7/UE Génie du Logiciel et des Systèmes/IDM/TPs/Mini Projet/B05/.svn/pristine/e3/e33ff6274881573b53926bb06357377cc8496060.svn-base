// automatically generated by Xtext
grammar fr.n7.simplepdl.txt.PDL with org.eclipse.xtext.common.Terminals

import "http://simplepdl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Process returns Process:
	{Process}
	'process' name=EString
	'{'
		processElements+=ProcessElement*	
	'}';

ProcessElement returns ProcessElement:
	WorkDefinition | WorkSequence | Guidance | Ressource;





EString returns ecore::EString:
	STRING | ID;

WorkDefinition returns WorkDefinition:
	{WorkDefinition}
	'wd' name=EString
	('{'
		('linksToPredecessors' '(' linksToPredecessors+=[WorkSequence|EString] ( "," linksToPredecessors+=[WorkSequence|EString])* ')' )?
		('linksToSuccessors' '(' linksToSuccessors+=[WorkSequence|EString] ( "," linksToSuccessors+=[WorkSequence|EString])* ')' )?
		('demande' demande+=Demande ( "," demande+=Demande)* )?
	'}')?;

WorkSequence returns WorkSequence:
	'ws' linkType=WorkSequenceType
	'from' predecessor=[WorkDefinition|EString]
	'to' successor=[WorkDefinition|EString] ;

Guidance returns Guidance:
	'note' text=EString
		('{' 'elements' '(' elements+=[ProcessElement|EString] ( "," elements+=[ProcessElement|EString])* ')' '}')?;

Ressource returns Ressource:
	'Ressource'
	name=EString quantity=EInt
		('{' demande+=[Demande|EString] ( "," demande+=[Demande|EString])* '}' )? ;

Demande returns Demande:
	name=EString ':'
	workdefinition=[WorkDefinition|EString] "needs"
	occurences=EInt
	ressource=[Ressource|EString];

EInt returns ecore::EInt:
	'-'? INT;

enum WorkSequenceType returns WorkSequenceType:
				startToStart = 's2s' | finishToStart = 'f2s' | startToFinish = 's2f' | finishToFinish = 'f2f';
				